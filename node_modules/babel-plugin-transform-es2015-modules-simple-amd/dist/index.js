"use strict";

var _getIterator2 = require("babel-runtime/core-js/get-iterator");

var _getIterator3 = _interopRequireDefault(_getIterator2);

require("better-log/install");

var _babelTemplate = require("babel-template");

var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var buildModule = (0, _babelTemplate2.default)("\ndefine([IMPORT_PATHS], function(IMPORT_VARS) {\n\tBODY;\n});\n");

module.exports = function (_ref) {
	var t = _ref.types;

	return {
		visitor: {
			Program: {
				exit: function exit(path, file) {
					var body = path.get("body"),
					    sources = [],
					    anonymousSources = [],
					    vars = [],
					    isModular = false;

					var _iteratorNormalCompletion = true;
					var _didIteratorError = false;
					var _iteratorError = undefined;

					try {
						for (var _iterator = (0, _getIterator3.default)(body), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
							var _path = _step.value;

							if (_path.isExportDefaultDeclaration()) {
								var declaration = _path.get("declaration");
								_path.replaceWith(t.returnStatement(declaration.node));

								isModular = true;
							}

							if (_path.isImportDeclaration()) {
								var key = _path.node.source.value,
								    specifiers = _path.node.specifiers;

								if (specifiers.length == 0) {
									anonymousSources.push(_path.node.source);
								} else if (specifiers.length == 1) {
									sources.push(_path.node.source);
									vars.push(specifiers[0]);
								} else {
									throw Error("Not allowed to use " + specifiers.length + " specifiers");
								}

								_path.remove();

								isModular = true;
							}
						}
					} catch (err) {
						_didIteratorError = true;
						_iteratorError = err;
					} finally {
						try {
							if (!_iteratorNormalCompletion && _iterator.return) {
								_iterator.return();
							}
						} finally {
							if (_didIteratorError) {
								throw _iteratorError;
							}
						}
					}

					if (isModular) {
						path.node.body = [buildModule({
							IMPORT_PATHS: sources.concat(anonymousSources),
							IMPORT_VARS: vars,
							BODY: path.node.body
						})];
					}
				}
			}
		}
	};
};