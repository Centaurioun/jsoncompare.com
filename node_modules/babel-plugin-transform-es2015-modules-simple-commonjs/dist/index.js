"use strict";

var _getIterator2 = require("babel-runtime/core-js/get-iterator");

var _getIterator3 = _interopRequireDefault(_getIterator2);

require("better-log/install");

var _babelTemplate = require("babel-template");

var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var buildModule = (0, _babelTemplate2.default)("\n\tIMPORTS;\n\tBODY;\n");

var buildRequire = (0, _babelTemplate2.default)("\n \trequire($0);\n");

var buildExportsAssignment = (0, _babelTemplate2.default)("\n \tmodule.exports = $0;\n");

module.exports = function (_ref) {
	var t = _ref.types;

	return {
		visitor: {
			Program: {
				exit: function exit(path, file) {
					var body = path.get("body"),
					    sources = [],
					    anonymousSources = [];

					var _iteratorNormalCompletion = true;
					var _didIteratorError = false;
					var _iteratorError = undefined;

					try {
						for (var _iterator = (0, _getIterator3.default)(body), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
							var _path = _step.value;

							if (_path.isExportDefaultDeclaration()) {
								var declaration = _path.get("declaration");
								_path.replaceWith(buildExportsAssignment(declaration.node));
							}

							if (_path.isImportDeclaration()) {
								var specifiers = _path.node.specifiers;

								if (specifiers.length == 0) {
									anonymousSources.push(buildRequire(_path.node.source));
								} else if (specifiers.length == 1) {
									sources.push(t.variableDeclaration("var", [t.variableDeclarator(t.identifier(specifiers[0].local.name), buildRequire(_path.node.source).expression)]));
								} else {
									throw Error("Not allowed to use more than one import specifiers");
								}

								_path.remove();
							}
						}
					} catch (err) {
						_didIteratorError = true;
						_iteratorError = err;
					} finally {
						try {
							if (!_iteratorNormalCompletion && _iterator.return) {
								_iterator.return();
							}
						} finally {
							if (_didIteratorError) {
								throw _iteratorError;
							}
						}
					}

					path.node.body = buildModule({
						IMPORTS: sources.concat(anonymousSources),
						BODY: path.node.body
					});
				}
			}
		}
	};
};